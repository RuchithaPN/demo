

1. **Iterator Pattern:**

   - **Explanation:** The Iterator pattern provides a way to access elements of a collection sequentially without exposing its underlying representation.
	The Iterator Pattern is a behavioral design pattern that provides a way to access elements of an aggregate object sequentially
	 without exposing the underlying representation of the object. It involves defining a separate object, known as an iterator, 
	which encapsulates the details of traversing the elements of a collection. The iterator provides a common interface for accessing the elements,
	 irrespective of the collection's specific implementation
	The Iterator Pattern provides a standardized way to iterate over elements, making it easier for clients to work with different types of collections. 
	It also allows collection classes to change their internal structure without affecting the code that uses iterators.



   - **Example:** The `Iterator` interface and its implementations in Java (e.g., `ArrayList`'s iterator) allow you to traverse 
	through the elements of a collection without knowing the internal structure of the collection.

   ```java
   List<String> myList = Arrays.asList("apple", "banana", "orange");
   Iterator<String> iterator = myList.iterator();

   while (iterator.hasNext()) {
       String fruit = iterator.next();
       System.out.println(fruit);
   }
   ```
in the example It has an internal List to store elements and provides an addElement method to add elements to the collection.
The iterator() method returns an instance of a custom iterator class (MyIterator).
The  iterator class (MyIterator) implements the Iterator interface with hasNext() and next() methods to traverse the elements of the collection.
In the main method, we  use an iterator to traverse and print the elements.



********************************************************************************************************************************************************



2. **Decorator Pattern:**
   - **Explanation:** The Decorator pattern is used to add new functionality to an object without altering its structure.
		The Decorator pattern allows behavior to be added to an individual object, either statically or dynamically,
		 without affecting the behavior of other objects from the same class.
		The Decorator Pattern is a structural design pattern that allows behavior to be added to an individual object, either statically or dynamically,
 		without affecting the behavior of other objects from the same class. It involves creating a set of decorator classes that are used to wrap concrete components.
	 	These decorators add or override functionalities of the original component they wrap.




Coffee is the base component class representing a simple coffee.
MilkDecorator and SugarDecorator are concrete decorator classes extending Coffee. They add the functionality of milk and sugar, respectively.
The decorators have a reference to the decorated coffee.
In the main method, we create a simple coffee and then decorate it with milk and sugar successively. The cost and description are printed for each step.
This example illustrates how the Decorator Pattern allows you to dynamically add responsibilities to objects without altering their code.
Decorators wrap around the base component, adding new behaviors or functionalities.


***************************************************************************************************************************************************


3. **Singleton Pattern:**
   - **Explanation:** The Singleton pattern ensures a class has only one instance and provides a global point of access to it.
   - **Example:** The `EmptyList` class in the Collections API is a singleton instance representing an empty list.



  The SingletonExample class has a private static instance and a private constructor.
The getInstance method is the public method through which the singleton instance is accessed. It ensures that only one instance of the class is created.


****************************************************************************************************************************************************



4. **Factory Method Pattern:**
   - **Explanation:** The Factory Method pattern defines an interface for creating an object but leaves the choice of its type to the subclasses, 
	creating instances of the object.
	The Factory Method Pattern is a creational design pattern that provides an interface for creating objects in a superclass but allows subclasses
	to alter the type of objects that will be created. It defines an interface for creating an object but leaves the choice of its type 
	to the subclasses, creating instances of different classes.

	In the context of the Java Collections API, factory methods are commonly used to create instances of various collection types. 
	The Collections class in Java provides several static factory methods for creating different types of collections.

   - **Example:**  In this example, we have a Shape class hierarchy with Circle and Square classes, 
	and a ShapeFactory class responsible for creating instances of these shapes:
	
	The Shape class is a base class with a draw method.
	The Circle and Square classes extend Shape and provide their own implementations of the draw method.
	The ShapeFactory class is responsible for creating instances of shapes based on the input type.
	In the main method, we use the ShapeFactory to create instances of Circle and Square and call their draw methods.

	This example demonstrates a simple Factory Method Pattern where the factory method (createShape) in the ShapeFactory class is responsible 
	for creating instances of different shapes based on the provided type

**************************************************************************************************************************************************



5. **Strategy Pattern:**
   - **Explanation:** The Strategy pattern defines a family of algorithms, encapsulates each one, and makes them interchangeable.
	The Strategy Pattern is a behavioral design pattern that defines a family of algorithms, encapsulates each algorithm,
	 and makes them interchangeable. It allows the client to choose the appropriate algorithm at runtime, without altering the client's code.
	 In Java's Collections API, the Strategy Pattern is often exemplified through the use of the Comparator interface.


   - **Example:** The `Collections.sort()` method allows you to pass a custom comparator, providing a strategy for sorting elements.

   ```java
   List<Integer> numbers = Arrays.asList(3, 1, 4, 1, 5, 9, 2, 6, 5);
   Collections.sort(numbers, Comparator.reverseOrder());
   ```

The main method initializes a list of integers.
The Collections.sort method is used to sort the list.
 The second argument is Comparator.reverseOrder(), which returns a comparator that imposes the reverse of the natural ordering.
Finally, we print the sorted list to the console.


*************************************************************************************************************************************************

