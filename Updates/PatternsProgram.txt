**************************************************************
1)

public class Patterns {
	 public static void main(String args[])
	    {
	        int n = 5;
	        printPattern(n);
	    }
	 
    public static void printPattern(int n)
    {
        int i, j;
        // Printing the upper part
        for (i = 1; i <= n; i++) {
            // inner loop to print spaces.
            for (j = 1; j < i; j++) {
                System.out.print(" ");
            }
            // inner loop to print value of j.
            for (j = i; j <= n; j++) {
                System.out.print(j + " ");
            }
            System.out.println();
        }
 
        // Printing the lower part
        for (i = n - 1; i >= 1; i--) {
            // inner loop to print spaces.
            for (j = 1; j < i; j++) {
                System.out.print(" ");
            }
            // inner loop to print value of j.
            for (j = i; j <= n; j++) {
                System.out.print(j + " ");
            }
            System.out.println();
        }
    }
 
   
}

The time complexity is O(n^2).
The space complexity is O(1).

Output:

1 2 3 4 5 
2 3 4 5 
  3 4 5 
   4 5 
    5 
   4 5 
  3 4 5 
2 3 4 5 
1 2 3 4 5
****************************************************************
2)

public class Pattern {
    public static void main(String[] args) {
        int n = 5; // Number of rows
        printPattern(n);
    }

   public static void printPattern(int n) {
	   for (int i = 0; i < n; i++) {
	        for (int j = 0; j < n; j++) {
	            System.out.print((i + j) % n + 1 + " ");
	        }
	        System.out.println();
	    }
   }
}

The time complexity is O(n^2).
The space complexity is O(1).

Output:

1 2 3 4 5 
2 3 4 5 1 
3 4 5 1 2 
4 5 1 2 3 
5 1 2 3 4 

***********************************************************************
3)
public class NumberPattern {
    public static void main(String[] args) {
        int n = 5; // Number of rows

        printNumberPattern(n);
    }

    static void printNumberPattern(int n) {
        for (int i = 0; i < 2 * n - 1; i++) {
            for (int j = 0; j < 2 * n - 1; j++) {
                System.out.print(Math.max(Math.abs(n - i - 1), Math.abs(n - j - 1)) + 1 + " ");
            }
            System.out.println();
        }
    }
}


The time complexity is O((2n - 1)^2).
The space complexity is O(1).

Output:

5 5 5 5 5 5 5 5 5 
5 4 4 4 4 4 4 4 5 
5 4 3 3 3 3 3 4 5 
5 4 3 2 2 2 3 4 5 
5 4 3 2 1 2 3 4 5 
5 4 3 2 2 2 3 4 5 
5 4 3 3 3 3 3 4 5 
5 4 4 4 4 4 4 4 5 
5 5 5 5 5 5 5 5 5

***********************************************************************
4)
public class NumPattern {
    public static void main(String[] args) {
        int n = 5; // Number of rows
        printNumberPattern(n);
    }

    static void printNumberPattern(int n) {
        for (int i = 0; i < n; i++) {
            int num = i + 1;
            for (int j = 0; j <= i; j++) {
                System.out.print(num + " ");
                num += n - j - 1;
            }
            System.out.println();
        }
    }
}

The time complexity is O(n^2).
The space complexity is O(1).

Output:

1
2 6
3 7 10 
4 8 11 13
5 9 12 14 15